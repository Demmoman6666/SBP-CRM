// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id                   String    @id @default(cuid())
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  salonName            String
  customerName         String
  addressLine1         String
  addressLine2         String?
  town                 String?
  county               String?
  postCode             String?
  daysOpen             String?
  brandsInterestedIn   String?
  notes                String?
  salesRep             String?
  customerNumber       String?
  customerTelephone    String?
  customerEmailAddress String?
  openingHours         String?
  numberOfChairs       Int?

  visits               Visit[]
  notesLog             Note[]
  callLogs             CallLog[]

  @@index([customerEmailAddress])
}

model Visit {
  id               String    @id @default(cuid())
  customerId       String
  customer         Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)

  date             DateTime  @default(now())
  startTime        DateTime?
  endTime          DateTime?
  durationMinutes  Int?

  summary          String?
  staff            String?

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([customerId, date])
}

model Note {
  id          String    @id @default(cuid())
  customerId  String
  customer    Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)

  text        String
  staff       String?
  createdAt   DateTime  @default(now())

  @@index([customerId, createdAt])
}

model SalesRep {
  id        String   @id @default(cuid())
  name      String   @unique
  email     String?
  createdAt DateTime @default(now())
}

model Brand {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
}

model CallLog {
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  isExistingCustomer Boolean

  customerId         String?
  customer           Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  customerName       String?
  contactPhone       String?
  contactEmail       String?

  callType           String?
  summary            String?
  outcome            String?
  staff              String?

  followUpRequired   Boolean   @default(false)
  followUpAt         DateTime?

  // NEW call timing fields
  startTime          DateTime?
  endTime            DateTime?
  durationMinutes    Int?
  appointmentBooked  Boolean?  @default(false)

  @@index([createdAt])
  @@index([isExistingCustomer, customerId])
}

// NEW: separate table for stocked brands (distinct from competitor Brand)
model StockedBrand {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
