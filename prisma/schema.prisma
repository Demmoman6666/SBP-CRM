// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Set this in Vercel envs to your Neon connection string
}

model Customer {
  id                   String    @id @default(cuid())
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  salonName            String
  customerName         String
  addressLine1         String
  addressLine2         String?
  town                 String?
  county               String?
  postCode             String?
  daysOpen             String?     // optional; not used in the form
  brandsInterestedIn   String?
  notes                String?
  salesRep             String?
  customerNumber       String?     // “Contact Number”
  customerTelephone    String?     // “Customer Telephone Number”
  customerEmailAddress String?
  openingHours         String?
  numberOfChairs       Int?

  // Relations
  visits               Visit[]
  notesLog             Note[]
  callLogs             CallLog[]   // Link to call logs

  @@index([customerEmailAddress])
}

model Visit {
  id               String    @id @default(cuid())
  customerId       String
  customer         Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)

  date             DateTime  @default(now())
  startTime        DateTime?
  endTime          DateTime?
  durationMinutes  Int?

  summary          String?
  staff            String?

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([customerId, date])
}

model Note {
  id          String    @id @default(cuid())
  customerId  String
  customer    Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)

  text        String
  staff       String?
  createdAt   DateTime  @default(now())

  @@index([customerId, createdAt])
}

model SalesRep {
  id        String   @id @default(cuid())
  name      String   @unique
  email     String?
  createdAt DateTime @default(now())
}

model Brand {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
}

// ======================
// NEW: CallLog model
// ======================
model CallLog {
  id                 String    @id @default(cuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Required split: is it about an existing customer?
  isExistingCustomer Boolean

  // If existing customer
  customerId         String?
  customer           Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  // If not existing, keep a lead-style snapshot
  customerName       String?
  contactName        String?
  contactPhone       String?
  contactEmail       String?

  // Common meta
  callType           String?
  summary            String?
  outcome            String?
  staff              String?   // Sales Rep (by name)
  followUpRequired   Boolean   @default(false)
  followUpAt         DateTime?

  @@index([createdAt])
  @@index([isExistingCustomer, customerId])
}
