// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------- Settings & Permissions ----------------
enum Role {
  ADMIN
  MANAGER
  REP
  VIEWER
}

enum Permission {
  VIEW_SALES_HUB
  VIEW_REPORTS
  VIEW_CUSTOMERS
  EDIT_CUSTOMERS
  VIEW_CALLS
  EDIT_CALLS
  VIEW_PROFIT_CALC
  VIEW_SETTINGS
}

// Targets enums
enum TargetScope {
  COMPANY
  REP
  VENDOR
}

enum TargetMetric {
  REVENUE
  ORDERS
  NEW_CUSTOMERS
}

// NEW: Customer lifecycle/stage
enum CustomerStage {
  LEAD
  APPOINTMENT_BOOKED
  SAMPLING
  CUSTOMER
}

/* NEW: Education request status */
enum EducationRequestStatus {
  REQUESTED
  BOOKED
  CANCELLED
}

model User {
  id           String           @id @default(cuid())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  fullName     String
  email        String           @unique
  phone        String?
  passwordHash String

  role         Role             @default(REP)
  isActive     Boolean          @default(true)

  // Google OAuth / Calendar
  googleEmail          String?  @unique
  googleAccessToken    String?
  googleRefreshToken   String?
  googleTokenExpiresAt DateTime?
  googleCalendarId     String?  @default("primary")

  // fine-grained overrides in addition to role
  overrides    UserPermission[]
  // back-relation for AuditLog.user
  auditLogs    AuditLog[]

  @@index([role])
}

model UserPermission {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  perm      Permission
  createdAt DateTime   @default(now())

  @@unique([userId, perm])
  @@index([perm])
}

model AuditLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  action    String
  details   Json?
}

// ---------------- Existing CRM models ----------------
model Customer {
  id                   String    @id @default(cuid())
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  salonName            String
  customerName         String
  addressLine1         String
  addressLine2         String?
  town                 String?
  county               String?
  postCode             String?
  country              String?
  daysOpen             String?
  brandsInterestedIn   String?
  notes                String?
  salesRep             String?
  customerNumber       String?
  customerTelephone    String?
  customerEmailAddress String?
  openingHours         String?
  numberOfChairs       Int?

  // NEW: lifecycle stage
  stage                CustomerStage @default(LEAD)

  visits               Visit[]
  notesLog             Note[]
  callLogs             CallLog[]

  // Shopify sync fields
  shopifyCustomerId    String?   @unique
  shopifyTags          String[]  @default([])
  shopifyLastSyncedAt  DateTime?

  // Orders relationship
  orders               Order[]

  // NEW: Education relationships
  educationRequests    EducationRequest[]
  educationBookings    EducationBooking[]

  @@index([customerEmailAddress])
  @@index([salesRep])
  @@index([stage])
}

model Visit {
  id               String    @id @default(cuid())
  customerId       String
  customer         Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)

  date             DateTime  @default(now())
  startTime        DateTime?
  endTime          DateTime?
  durationMinutes  Int?

  summary          String?
  staff            String?

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([customerId, date])
}

model Note {
  id          String    @id @default(cuid())
  customerId  String
  customer    Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)

  text        String
  staff       String?
  createdAt   DateTime  @default(now())

  @@index([customerId, createdAt])
}

model SalesRep {
  id        String   @id @default(cuid())
  name      String   @unique
  email     String?
  createdAt DateTime @default(now())

  tagRules  SalesRepTagRule[]

  // back-relation for Target.rep
  targets   Target[]  @relation("TargetRep")
}

model Brand {
  id               String   @id @default(cuid())
  name             String   @unique
  createdAt        DateTime @default(now())

  // Toggle in Global Settings to show in Call Log competitor list
  visibleInCallLog Boolean  @default(false)

  // back-relation for CallLogCompetitorBrand.brand
  competitorLinks  CallLogCompetitorBrand[]
}

model CallLog {
  id                   String   @id @default(cuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  isExistingCustomer   Boolean

  customerId           String?
  customer             Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  customerName         String?
  contactPhone         String?
  contactEmail         String?

  callType             String?
  summary              String?
  outcome              String?
  staff                String?

  // NEW: stage captured at the time of the call
  stage                CustomerStage?

  followUpRequired     Boolean   @default(false)
  followUpAt           DateTime?

  startTime            DateTime?
  endTime              DateTime?
  durationMinutes      Int?
  appointmentBooked    Boolean?  @default(false)

  // links chosen during the call
  stockedBrandLinks    CallLogStockedBrand[]
  competitorBrandLinks CallLogCompetitorBrand[]

  @@index([createdAt])
  @@index([isExistingCustomer, customerId])
  @@index([stage])
}

model StockedBrand {
  id               String   @id @default(cuid())
  name             String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Toggle in Global Settings to show in Call Log stocked list
  visibleInCallLog Boolean  @default(false)

  // back-relation for CallLogStockedBrand.brand
  callLinks        CallLogStockedBrand[]

  // back-relation for Target.vendor
  targets          Target[]  @relation("TargetVendor")
}

model Order {
  id                 String     @id @default(cuid())
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  // Shopify identifiers
  shopifyOrderId     String?    @unique
  shopifyOrderNumber Int?
  shopifyName        String?
  shopifyCustomerId  String?

  // Customer link
  customerId         String?
  customer           Customer?  @relation(fields: [customerId], references: [id], onDelete: SetNull)

  // Timestamps & status
  processedAt        DateTime?
  currency           String?
  financialStatus    String?
  fulfillmentStatus  String?

  // Money
  subtotal           Decimal?   @db.Decimal(12, 2)
  total              Decimal?   @db.Decimal(12, 2)
  taxes              Decimal?   @db.Decimal(12, 2)
  discounts          Decimal?   @db.Decimal(12, 2)
  shipping           Decimal?   @db.Decimal(12, 2)

  lineItems          OrderLineItem[]

  @@index([customerId, processedAt])
  @@index([shopifyCustomerId])
}

model OrderLineItem {
  id                String   @id @default(cuid())
  orderId           String
  order             Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  // Shopify identifiers
  shopifyLineItemId String?  @unique
  productId         String?
  productTitle      String?
  variantId         String?
  variantTitle      String?
  sku               String?

  // captured from Shopify line_items[].vendor
  productVendor     String?

  quantity          Int      @default(1)
  price             Decimal? @db.Decimal(12, 2)
  total             Decimal? @db.Decimal(12, 2)

  createdAt         DateTime @default(now())

  @@index([orderId])
  @@index([productVendor])
}

model SalesRepTagRule {
  id          String   @id @default(cuid())
  tag         String   @unique
  salesRepId  String
  salesRep    SalesRep @relation(fields: [salesRepId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}

model ShopifySyncState {
  id                    Int      @id @default(1)
  lastCustomersSyncedAt DateTime?
  lastOrdersSyncedAt    DateTime?
  lastWebhookReceivedAt DateTime?
  updatedAt             DateTime @updatedAt
}

model WebhookLog {
  id        String   @id @default(cuid())
  topic     String
  shopifyId String?
  payload   Json
  createdAt DateTime @default(now())

  @@index([topic, createdAt])
}

// Targets model
model Target {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  scope        TargetScope
  metric       TargetMetric

  periodStart  DateTime
  periodEnd    DateTime

  amount       Decimal       @db.Decimal(12, 2)
  currency     String?       @default("GBP")

  // Optional dimensions per scope
  repId        String?
  rep          SalesRep?     @relation("TargetRep", fields: [repId], references: [id], onDelete: SetNull)

  vendorId     String?
  vendor       StockedBrand? @relation("TargetVendor", fields: [vendorId], references: [id], onDelete: SetNull)

  notes        String?

  @@index([scope, metric, periodStart, periodEnd])
  @@index([repId])
  @@index([vendorId])
  @@unique([scope, metric, periodStart, periodEnd, repId, vendorId], map: "scope_metric_periodStart_periodEnd_repId_vendorId")
}

// ---------------- Many-to-many join tables for CallLog x Brands ----------------
model CallLogStockedBrand {
  id        String       @id @default(cuid())
  callLogId String
  brandId   String
  createdAt DateTime     @default(now())

  callLog   CallLog      @relation(fields: [callLogId], references: [id], onDelete: Cascade)
  brand     StockedBrand @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@unique([callLogId, brandId])
  @@index([brandId])
}

model CallLogCompetitorBrand {
  id        String   @id @default(cuid())
  callLogId String
  brandId   String
  createdAt DateTime @default(now())

  callLog   CallLog  @relation(fields: [callLogId], references: [id], onDelete: Cascade)
  brand     Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@unique([callLogId, brandId])
  @@index([brandId])
}

/* ---------------- NEW: Education Requests & Bookings ---------------- */

model EducationRequest {
  id             String                  @id @default(cuid())
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt

  // Link to customer
  customerId     String
  customer       Customer                @relation(fields: [customerId], references: [id], onDelete: Cascade)

  // Snapshot of details at request time
  salonName      String?
  contactName    String?
  email          String?
  telephone      String?
  addressLine1   String?
  addressLine2   String?
  town           String?
  county         String?
  postCode       String?
  country        String?

  // What was requested
  brandIds       String[]                @default([])
  brandNames     String[]                @default([])
  educationTypes String[]                @default([])
  notes          String?

  status         EducationRequestStatus  @default(REQUESTED)

  // Optional booking created off the back of this request
  bookingId      String?
  booking        EducationBooking?       @relation(fields: [bookingId], references: [id], onDelete: SetNull)

  @@index([customerId, status, createdAt])
}

model EducationBooking {
  id             String            @id @default(cuid())
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // Optional origin request
  requestId      String?
  request        EducationRequest? @relation(fields: [requestId], references: [id], onDelete: SetNull)

  // Always link to customer
  customerId     String
  customer       Customer          @relation(fields: [customerId], references: [id], onDelete: Cascade)

  // When/where/who
  scheduledAt    DateTime?
  educator       String?
  location       String?

  // Copy of brands & types
  brandIds       String[]          @default([])
  educationTypes String[]          @default([])

  notes          String?
  status         String?           @default("BOOKED")

  @@index([customerId, scheduledAt])
}
